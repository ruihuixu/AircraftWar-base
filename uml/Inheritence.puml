@startuml
'https://plantuml.com/class-diagram

class Main

abstract class Game{
   - bossNumber
   # bossNeeded:boolean
   # enemyMaxNumber:int
   # eliteChance:double
   # bossLimit:int
   # hpAdded:int
   # {abstract} initialise():void
   # {abstract} getHpAdded(int bossNumber):int
   # {abstract} getDifficulty(int time):double
}

class EasyGame{
    # initialise():void
    # getHpAdded(int bossNumber):int
    # getDifficulty(int time):double
}

class NormalGame{
    # initialise():void
    # getHpAdded(int bossNumber):int
    # getDifficulty(int time):double
}

class HardGame{
    # initialise():void
    # getHpAdded(int bossNumber):int
    # getDifficulty(int time):double
}

interface EnemyFactory {
    + create(int hpAdded):AbstractEnemy
}

interface PropFactory {
    + create(int x,int y):AbstractProp
}

abstract class AbstractFlyingObject
{
    # locationX:int
    # locationY:int
    # speedX:int
    # speedY:int
    # image:BufferedImage
    # width:int
    # height:int
    # isValid:boolean

    + AbstractFlyingObject(int locationX, int locationY, int speedX, int speedY):void
    + forward():void
    + crash(AbstractFlyingObject flyingObject):boolean
    + setLocation(double locationX, double locationY):void
    + getLocationX():int
    + getLocationY():int
    + getSpeedY():int
    + getImage():BufferedImage
    + getWidth():int
    + getHeight():int
    + notValid():boolean
    + vanish():void
}
abstract class AbstractAircraft
{
	# maxHp:int
    # hp:int
    # shootNum:int
    # power:int
    # kind:int
    + AbstractAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
    + decreaseHp(int decrease):void
    + increaseHp(int increase):void
    + getHp():int
    + getShootNum():int
    + getPower():int
    + getKind():int
    + {abstract} shoot():List<BaseBullet>
}
abstract class AbstractEnemy
{
	# score:int
	+ getScore():int
	+ AbstractEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
	+ {abstract}addProp(AbstractEnemy abstractEnemy):List<AbstractProp>
}

class BaseBullet
{
    - power:int
    + BaseBullet(int locationX, int locationY, int speedX, int speedY, int power):void
    + forward():void
	+ getPower():int
}

abstract class AbstractProp
{
    - propkind
    + AbstractProp(int locationX, int locationY, int speedX, int speedY):void
    + getPropkind():int
}

interface ShootStrategy {
   + fireWay(AbstractAircraft aircraft):List<BaseBullet>
}

class ShootContext{
    - strategy:ShootStrategy
    + ShootContext(ShootStrategy strategy):void
    + setStrategy(ShootStrategy strategy):void
    + executeStrategy(AbstractAircraft aircraft):List<BaseBullet>
}
ShootContext <.. HeroAircraft
ShootContext <.. BossEnemy
ShootContext  o--> ShootStrategy
ShootContext <.. EliteEnemy
ShootStrategy  <|.. ScatterShoot
ShootStrategy <|.. StraightShoot

class ScatterShoot {
   + fireWay(AbstractAircraft aircraft):List<BaseBullet>
}

class StraightShoot {
   + fireWay(AbstractAircraft aircraft):List<BaseBullet>
}

Game ..> EnemyFactory
Game ..> PropFactory
Game ..> AbstractAircraft
Game ..> AbstractProp
Game <|-- EasyGame
Game <|-- NormalGame
Game <|-- HardGame
Main ..> Game

EnemyFactory <.. EliteFactory
EnemyFactory <.. MobFactory
EnemyFactory <.. BossFactory
EliteFactory ..> EliteEnemy:create
MobFactory ..> MobEnemy:create
BossFactory ..> BossEnemy:create

PropFactory <|.. BloodFactory
PropFactory <|.. BombFactory
PropFactory <|.. FireFactory
BloodFactory ..> BloodProp:create
FireFactory ..> FireProp:create
BombFactory ..> BombProp:create

AbstractFlyingObject <|-- AbstractAircraft
AbstractFlyingObject <|-- BaseBullet
AbstractFlyingObject <|-- AbstractProp

AbstractAircraft <|-- HeroAircraft
AbstractAircraft <|-- AbstractEnemy
MobEnemy --|> AbstractEnemy
EliteEnemy --|> AbstractEnemy
BossEnemy --|> AbstractEnemy

BaseBullet <|-- HeroBullet
BaseBullet <|-- EnemyBullet

AbstractProp <|-- FireProp
AbstractProp <|-- BloodProp
AbstractProp <|-- BombProp

interface RecordDao {
     + doAdd(Record record):void
     + getAllRecords():List<Record>
     + ranking():void
}

RecordDao <. Game
RecordDao <|.. RecordDaoImpl
Record <- RecordDaoImpl

class RecordDaoImpl {
      - records:List<Record>
      + doAdd(Record record):void
      + getAllRecords():List<Record>
      + ranking():void
      + store():void
      + read():void
}

class Record{
      - name:String
      - score:int
      - time:String
      + Record(String time,int score):void
      + getScore():int
      + getName():String
      + getTime():String
      + setName(String name):void
      + setTime(String time):void
      + setScore(int score):void
}

class EliteFactory {
    + create():EliteEnemy
}

class MobFactory {
    + create():MobEnemy
}

class BossFactory {
    + create():BossEnemy
}

class BloodFactory {
    + create(int x,int y):BloodProp
}

class FireFactory {
    + create(int x,int y):FireProp
}

class BombFactory {
    + create(int x,int y):BombProp
}

class HeroAircraft {
     - {static} heroAircraft:HeroAircraft
     - strategy:ShootStrategy
     - shootNum:int
     - power:int
     - direction:int
     - kind:int
     + {static} getInstance():HeroAircraft
     - HeroAircraft(int locationX, int locationY, int speedX, int speedY, int hp):void
     + forward():void
     + shoot():List<BaseBullet>
     + setStrategy(ShootStrategy strategy):void
}

class MobEnemy {
    + MobEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + forward():void
    + kind():int
    + shoot():List<BaseBullet>
}

class EliteEnemy {
    - shootNum:int
    - power:int
    - direction:int
    - kind:int
    + EliteEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + forward():void
    + shoot():List<BaseBullet>
    + addProp():List<AbstractProp>
}

class BossEnemy {
    - shootNum:int
    - power:int
    - direction:int
    - kind:int
    + BossEnemy(int locationX, int locationY, int speedX, int speedY, int hp):void
    + forward():void
    + enemyKind():int
    + shoot():List<Bullet>
}

class HeroBullet {
    + HeroBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class EnemyBullet {
    + EnemyBullet(int locationX, int locationY,
     int speedX, int speedY, int power):void
}

class FireProp {
    - propkind
    + FireTool(int locationX, int locationY, int speedX, int speedY):void
}

class BloodProp {
    - propkind
    + BloodTool(int locationX, int locationY, int speedX, int speedY):void
}

class BombProp {
   - propkind
   + BombProp(int locationX, int locationY, int speedX, int speedY):void
}
@enduml